/*
o ------------------------------------------------------------------------------
#
# Copyright (c) 1986-2016 Pixar. All rights reserved.
#
# The information in this file (the "Software") is provided for the exclusive
# use of the software licensees of Pixar ("Licensees").  Licensees have the
# right to incorporate the Software into other products for use by other
# authorized software licensees of Pixar, without fee. Except as expressly
# permitted herein, the Software may not be disclosed to third parties, copied
# or duplicated in any form, in whole or in part, without the prior written
# permission of Pixar.
#
# The copyright notices in the Software and this entire statement, including the
# above license grant, this restriction and the following disclaimer, must be
# included in all copies of the Software, in whole or in part, and all permitted
# derivative works of the Software, unless such copies or derivative works are
# solely in the form of machine-executable object code generated by a source
# language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL PIXAR BE
# LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  IN NO CASE WILL
# PIXAR'S TOTAL LIABILITY FOR ALL DAMAGES ARISING OUT OF OR IN CONNECTION WITH
# THE USE OR PERFORMANCE OF THIS SOFTWARE EXCEED $50.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/

/* $Revision: #3 $ */

#include <cstring>
#include "RixDisplayFilter.h"
#include <iostream>
#include <fstream>
#include <string> 

class myDisplayFilter : public RixDisplayFilter
{

public:
	myDisplayFilter();
	virtual ~myDisplayFilter();
	virtual int Init(RixContext &ctx, char const *pluginPath);
	virtual RixSCParamInfo const *GetParamTable();
	virtual void Finalize(RixContext &ctx);

	virtual void Filter(RixDisplayFilterContext &fCtx,
		RtConstPointer instance);

private:

};

myDisplayFilter::myDisplayFilter()
{
}

myDisplayFilter::~myDisplayFilter()
{
}

int myDisplayFilter::Init(RixContext &ctx, char const *pluginPath)
{
	return 0;
}

RixSCParamInfo const *
myDisplayFilter::GetParamTable()
{
	static RixSCParamInfo table[] =
	{
		RixSCParamInfo()
	};
	return &table[0];
}

void myDisplayFilter::Finalize(RixContext &ctx)
{
}


void myDisplayFilter::Filter(RixDisplayFilterContext &fCtx, RtConstPointer instance)
{
	for (int x = fCtx.xmin; x < fCtx.xmax; ++x) {
		for (int y = fCtx.ymin; y < fCtx.ymax; ++y) {
			RtColorRGB new_pixel;
			std::ifstream myfile(".\\myData\\" + std::to_string(y) + "_" + std::to_string(x));
			if (myfile) {	
			std::string input;
			getline(myfile, input);
			input = input.substr(input.find_first_of(":") + 1, input.length());
			std::string red = input.substr(0, input.find_first_of(","));
			input = input.substr(input.find_first_of(",") + 1, input.length());
			std::string green = input.substr(0, input.find_first_of(","));
			input = input.substr(input.find_first_of(",") + 1, input.length());
			std::string blue = input;
			new_pixel.r = std::stof(red);
			new_pixel.g = std::stof(green);
			new_pixel.b = std::stof(blue);
			fCtx.Write(0, x, y, new_pixel);
			// The file exists, and is open for input
			}
		}
	}
}

RIX_DISPLAYFILTERCREATE
{
	return new myDisplayFilter();
}

RIX_DISPLAYFILTERDESTROY
{
	delete reinterpret_cast< myDisplayFilter * >(filter);
}
